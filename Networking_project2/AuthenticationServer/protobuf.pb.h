// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protobuf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protobuf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protobuf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protobuf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protobuf_2eproto;
namespace gProtocol {
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class Message_AuthenticateWeb;
class Message_AuthenticateWebDefaultTypeInternal;
extern Message_AuthenticateWebDefaultTypeInternal _Message_AuthenticateWeb_default_instance_;
class Message_AuthenticateWebFailure;
class Message_AuthenticateWebFailureDefaultTypeInternal;
extern Message_AuthenticateWebFailureDefaultTypeInternal _Message_AuthenticateWebFailure_default_instance_;
class Message_AuthenticateWebSuccess;
class Message_AuthenticateWebSuccessDefaultTypeInternal;
extern Message_AuthenticateWebSuccessDefaultTypeInternal _Message_AuthenticateWebSuccess_default_instance_;
class Message_CreateAccountWeb;
class Message_CreateAccountWebDefaultTypeInternal;
extern Message_CreateAccountWebDefaultTypeInternal _Message_CreateAccountWeb_default_instance_;
class Message_CreateAccountWebFailure;
class Message_CreateAccountWebFailureDefaultTypeInternal;
extern Message_CreateAccountWebFailureDefaultTypeInternal _Message_CreateAccountWebFailure_default_instance_;
class Message_CreateAccountWebSuccess;
class Message_CreateAccountWebSuccessDefaultTypeInternal;
extern Message_CreateAccountWebSuccessDefaultTypeInternal _Message_CreateAccountWebSuccess_default_instance_;
}  // namespace gProtocol
PROTOBUF_NAMESPACE_OPEN
template<> ::gProtocol::Message* Arena::CreateMaybeMessage<::gProtocol::Message>(Arena*);
template<> ::gProtocol::Message_AuthenticateWeb* Arena::CreateMaybeMessage<::gProtocol::Message_AuthenticateWeb>(Arena*);
template<> ::gProtocol::Message_AuthenticateWebFailure* Arena::CreateMaybeMessage<::gProtocol::Message_AuthenticateWebFailure>(Arena*);
template<> ::gProtocol::Message_AuthenticateWebSuccess* Arena::CreateMaybeMessage<::gProtocol::Message_AuthenticateWebSuccess>(Arena*);
template<> ::gProtocol::Message_CreateAccountWeb* Arena::CreateMaybeMessage<::gProtocol::Message_CreateAccountWeb>(Arena*);
template<> ::gProtocol::Message_CreateAccountWebFailure* Arena::CreateMaybeMessage<::gProtocol::Message_CreateAccountWebFailure>(Arena*);
template<> ::gProtocol::Message_CreateAccountWebSuccess* Arena::CreateMaybeMessage<::gProtocol::Message_CreateAccountWebSuccess>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gProtocol {

enum Message_CreateAccountWebFailure_reason : int {
  Message_CreateAccountWebFailure_reason_ACCOUNT_ALREADY_EXISTS = 0,
  Message_CreateAccountWebFailure_reason_INVALID_PASSWORD = 1,
  Message_CreateAccountWebFailure_reason_INTERNAL_SERVER_ERROR = 2
};
bool Message_CreateAccountWebFailure_reason_IsValid(int value);
constexpr Message_CreateAccountWebFailure_reason Message_CreateAccountWebFailure_reason_reason_MIN = Message_CreateAccountWebFailure_reason_ACCOUNT_ALREADY_EXISTS;
constexpr Message_CreateAccountWebFailure_reason Message_CreateAccountWebFailure_reason_reason_MAX = Message_CreateAccountWebFailure_reason_INTERNAL_SERVER_ERROR;
constexpr int Message_CreateAccountWebFailure_reason_reason_ARRAYSIZE = Message_CreateAccountWebFailure_reason_reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_CreateAccountWebFailure_reason_descriptor();
template<typename T>
inline const std::string& Message_CreateAccountWebFailure_reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_CreateAccountWebFailure_reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_CreateAccountWebFailure_reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_CreateAccountWebFailure_reason_descriptor(), enum_t_value);
}
inline bool Message_CreateAccountWebFailure_reason_Parse(
    const std::string& name, Message_CreateAccountWebFailure_reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_CreateAccountWebFailure_reason>(
    Message_CreateAccountWebFailure_reason_descriptor(), name, value);
}
enum Message_AuthenticateWebFailure_reason : int {
  Message_AuthenticateWebFailure_reason_INVALID_CREDENTIALS = 0,
  Message_AuthenticateWebFailure_reason_INTERNAL_SERVER_ERROR = 1
};
bool Message_AuthenticateWebFailure_reason_IsValid(int value);
constexpr Message_AuthenticateWebFailure_reason Message_AuthenticateWebFailure_reason_reason_MIN = Message_AuthenticateWebFailure_reason_INVALID_CREDENTIALS;
constexpr Message_AuthenticateWebFailure_reason Message_AuthenticateWebFailure_reason_reason_MAX = Message_AuthenticateWebFailure_reason_INTERNAL_SERVER_ERROR;
constexpr int Message_AuthenticateWebFailure_reason_reason_ARRAYSIZE = Message_AuthenticateWebFailure_reason_reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_AuthenticateWebFailure_reason_descriptor();
template<typename T>
inline const std::string& Message_AuthenticateWebFailure_reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_AuthenticateWebFailure_reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_AuthenticateWebFailure_reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_AuthenticateWebFailure_reason_descriptor(), enum_t_value);
}
inline bool Message_AuthenticateWebFailure_reason_Parse(
    const std::string& name, Message_AuthenticateWebFailure_reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_AuthenticateWebFailure_reason>(
    Message_AuthenticateWebFailure_reason_descriptor(), name, value);
}
enum Message_MessageType : int {
  Message_MessageType_Create = 0,
  Message_MessageType_Authenticate = 1
};
bool Message_MessageType_IsValid(int value);
constexpr Message_MessageType Message_MessageType_MessageType_MIN = Message_MessageType_Create;
constexpr Message_MessageType Message_MessageType_MessageType_MAX = Message_MessageType_Authenticate;
constexpr int Message_MessageType_MessageType_ARRAYSIZE = Message_MessageType_MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_MessageType_descriptor();
template<typename T>
inline const std::string& Message_MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_MessageType_descriptor(), enum_t_value);
}
inline bool Message_MessageType_Parse(
    const std::string& name, Message_MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_MessageType>(
    Message_MessageType_descriptor(), name, value);
}
// ===================================================================

class Message_CreateAccountWeb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gProtocol.Message.CreateAccountWeb) */ {
 public:
  Message_CreateAccountWeb();
  virtual ~Message_CreateAccountWeb();

  Message_CreateAccountWeb(const Message_CreateAccountWeb& from);
  Message_CreateAccountWeb(Message_CreateAccountWeb&& from) noexcept
    : Message_CreateAccountWeb() {
    *this = ::std::move(from);
  }

  inline Message_CreateAccountWeb& operator=(const Message_CreateAccountWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_CreateAccountWeb& operator=(Message_CreateAccountWeb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_CreateAccountWeb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_CreateAccountWeb* internal_default_instance() {
    return reinterpret_cast<const Message_CreateAccountWeb*>(
               &_Message_CreateAccountWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message_CreateAccountWeb& a, Message_CreateAccountWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_CreateAccountWeb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_CreateAccountWeb* New() const final {
    return CreateMaybeMessage<Message_CreateAccountWeb>(nullptr);
  }

  Message_CreateAccountWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_CreateAccountWeb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_CreateAccountWeb& from);
  void MergeFrom(const Message_CreateAccountWeb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_CreateAccountWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gProtocol.Message.CreateAccountWeb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  void set_plaintextpassword(const std::string& value);
  void set_plaintextpassword(std::string&& value);
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  std::string* mutable_plaintextpassword();
  std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // required int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gProtocol.Message.CreateAccountWeb)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// -------------------------------------------------------------------

class Message_CreateAccountWebSuccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gProtocol.Message.CreateAccountWebSuccess) */ {
 public:
  Message_CreateAccountWebSuccess();
  virtual ~Message_CreateAccountWebSuccess();

  Message_CreateAccountWebSuccess(const Message_CreateAccountWebSuccess& from);
  Message_CreateAccountWebSuccess(Message_CreateAccountWebSuccess&& from) noexcept
    : Message_CreateAccountWebSuccess() {
    *this = ::std::move(from);
  }

  inline Message_CreateAccountWebSuccess& operator=(const Message_CreateAccountWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_CreateAccountWebSuccess& operator=(Message_CreateAccountWebSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_CreateAccountWebSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_CreateAccountWebSuccess* internal_default_instance() {
    return reinterpret_cast<const Message_CreateAccountWebSuccess*>(
               &_Message_CreateAccountWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Message_CreateAccountWebSuccess& a, Message_CreateAccountWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_CreateAccountWebSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_CreateAccountWebSuccess* New() const final {
    return CreateMaybeMessage<Message_CreateAccountWebSuccess>(nullptr);
  }

  Message_CreateAccountWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_CreateAccountWebSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_CreateAccountWebSuccess& from);
  void MergeFrom(const Message_CreateAccountWebSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_CreateAccountWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gProtocol.Message.CreateAccountWebSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gProtocol.Message.CreateAccountWebSuccess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// -------------------------------------------------------------------

class Message_CreateAccountWebFailure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gProtocol.Message.CreateAccountWebFailure) */ {
 public:
  Message_CreateAccountWebFailure();
  virtual ~Message_CreateAccountWebFailure();

  Message_CreateAccountWebFailure(const Message_CreateAccountWebFailure& from);
  Message_CreateAccountWebFailure(Message_CreateAccountWebFailure&& from) noexcept
    : Message_CreateAccountWebFailure() {
    *this = ::std::move(from);
  }

  inline Message_CreateAccountWebFailure& operator=(const Message_CreateAccountWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_CreateAccountWebFailure& operator=(Message_CreateAccountWebFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_CreateAccountWebFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_CreateAccountWebFailure* internal_default_instance() {
    return reinterpret_cast<const Message_CreateAccountWebFailure*>(
               &_Message_CreateAccountWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Message_CreateAccountWebFailure& a, Message_CreateAccountWebFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_CreateAccountWebFailure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_CreateAccountWebFailure* New() const final {
    return CreateMaybeMessage<Message_CreateAccountWebFailure>(nullptr);
  }

  Message_CreateAccountWebFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_CreateAccountWebFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_CreateAccountWebFailure& from);
  void MergeFrom(const Message_CreateAccountWebFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_CreateAccountWebFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gProtocol.Message.CreateAccountWebFailure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_CreateAccountWebFailure_reason reason;
  static constexpr reason ACCOUNT_ALREADY_EXISTS =
    Message_CreateAccountWebFailure_reason_ACCOUNT_ALREADY_EXISTS;
  static constexpr reason INVALID_PASSWORD =
    Message_CreateAccountWebFailure_reason_INVALID_PASSWORD;
  static constexpr reason INTERNAL_SERVER_ERROR =
    Message_CreateAccountWebFailure_reason_INTERNAL_SERVER_ERROR;
  static inline bool reason_IsValid(int value) {
    return Message_CreateAccountWebFailure_reason_IsValid(value);
  }
  static constexpr reason reason_MIN =
    Message_CreateAccountWebFailure_reason_reason_MIN;
  static constexpr reason reason_MAX =
    Message_CreateAccountWebFailure_reason_reason_MAX;
  static constexpr int reason_ARRAYSIZE =
    Message_CreateAccountWebFailure_reason_reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reason_descriptor() {
    return Message_CreateAccountWebFailure_reason_descriptor();
  }
  template<typename T>
  static inline const std::string& reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reason_Name.");
    return Message_CreateAccountWebFailure_reason_Name(enum_t_value);
  }
  static inline bool reason_Parse(const std::string& name,
      reason* value) {
    return Message_CreateAccountWebFailure_reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // required int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gProtocol.Message.CreateAccountWebFailure)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// -------------------------------------------------------------------

class Message_AuthenticateWeb :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gProtocol.Message.AuthenticateWeb) */ {
 public:
  Message_AuthenticateWeb();
  virtual ~Message_AuthenticateWeb();

  Message_AuthenticateWeb(const Message_AuthenticateWeb& from);
  Message_AuthenticateWeb(Message_AuthenticateWeb&& from) noexcept
    : Message_AuthenticateWeb() {
    *this = ::std::move(from);
  }

  inline Message_AuthenticateWeb& operator=(const Message_AuthenticateWeb& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_AuthenticateWeb& operator=(Message_AuthenticateWeb&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_AuthenticateWeb& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_AuthenticateWeb* internal_default_instance() {
    return reinterpret_cast<const Message_AuthenticateWeb*>(
               &_Message_AuthenticateWeb_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Message_AuthenticateWeb& a, Message_AuthenticateWeb& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_AuthenticateWeb* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_AuthenticateWeb* New() const final {
    return CreateMaybeMessage<Message_AuthenticateWeb>(nullptr);
  }

  Message_AuthenticateWeb* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_AuthenticateWeb>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_AuthenticateWeb& from);
  void MergeFrom(const Message_AuthenticateWeb& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_AuthenticateWeb* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gProtocol.Message.AuthenticateWeb";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kRequestIdFieldNumber = 1,
  };
  // required string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // required string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  void set_plaintextpassword(const std::string& value);
  void set_plaintextpassword(std::string&& value);
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  std::string* mutable_plaintextpassword();
  std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // required int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gProtocol.Message.AuthenticateWeb)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// -------------------------------------------------------------------

class Message_AuthenticateWebSuccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gProtocol.Message.AuthenticateWebSuccess) */ {
 public:
  Message_AuthenticateWebSuccess();
  virtual ~Message_AuthenticateWebSuccess();

  Message_AuthenticateWebSuccess(const Message_AuthenticateWebSuccess& from);
  Message_AuthenticateWebSuccess(Message_AuthenticateWebSuccess&& from) noexcept
    : Message_AuthenticateWebSuccess() {
    *this = ::std::move(from);
  }

  inline Message_AuthenticateWebSuccess& operator=(const Message_AuthenticateWebSuccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_AuthenticateWebSuccess& operator=(Message_AuthenticateWebSuccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_AuthenticateWebSuccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_AuthenticateWebSuccess* internal_default_instance() {
    return reinterpret_cast<const Message_AuthenticateWebSuccess*>(
               &_Message_AuthenticateWebSuccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Message_AuthenticateWebSuccess& a, Message_AuthenticateWebSuccess& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_AuthenticateWebSuccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_AuthenticateWebSuccess* New() const final {
    return CreateMaybeMessage<Message_AuthenticateWebSuccess>(nullptr);
  }

  Message_AuthenticateWebSuccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_AuthenticateWebSuccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_AuthenticateWebSuccess& from);
  void MergeFrom(const Message_AuthenticateWebSuccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_AuthenticateWebSuccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gProtocol.Message.AuthenticateWebSuccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreationDateFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // required string creationDate = 3;
  bool has_creationdate() const;
  private:
  bool _internal_has_creationdate() const;
  public:
  void clear_creationdate();
  const std::string& creationdate() const;
  void set_creationdate(const std::string& value);
  void set_creationdate(std::string&& value);
  void set_creationdate(const char* value);
  void set_creationdate(const char* value, size_t size);
  std::string* mutable_creationdate();
  std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // required int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gProtocol.Message.AuthenticateWebSuccess)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// -------------------------------------------------------------------

class Message_AuthenticateWebFailure :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gProtocol.Message.AuthenticateWebFailure) */ {
 public:
  Message_AuthenticateWebFailure();
  virtual ~Message_AuthenticateWebFailure();

  Message_AuthenticateWebFailure(const Message_AuthenticateWebFailure& from);
  Message_AuthenticateWebFailure(Message_AuthenticateWebFailure&& from) noexcept
    : Message_AuthenticateWebFailure() {
    *this = ::std::move(from);
  }

  inline Message_AuthenticateWebFailure& operator=(const Message_AuthenticateWebFailure& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message_AuthenticateWebFailure& operator=(Message_AuthenticateWebFailure&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message_AuthenticateWebFailure& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message_AuthenticateWebFailure* internal_default_instance() {
    return reinterpret_cast<const Message_AuthenticateWebFailure*>(
               &_Message_AuthenticateWebFailure_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Message_AuthenticateWebFailure& a, Message_AuthenticateWebFailure& b) {
    a.Swap(&b);
  }
  inline void Swap(Message_AuthenticateWebFailure* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message_AuthenticateWebFailure* New() const final {
    return CreateMaybeMessage<Message_AuthenticateWebFailure>(nullptr);
  }

  Message_AuthenticateWebFailure* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message_AuthenticateWebFailure>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message_AuthenticateWebFailure& from);
  void MergeFrom(const Message_AuthenticateWebFailure& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message_AuthenticateWebFailure* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gProtocol.Message.AuthenticateWebFailure";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_AuthenticateWebFailure_reason reason;
  static constexpr reason INVALID_CREDENTIALS =
    Message_AuthenticateWebFailure_reason_INVALID_CREDENTIALS;
  static constexpr reason INTERNAL_SERVER_ERROR =
    Message_AuthenticateWebFailure_reason_INTERNAL_SERVER_ERROR;
  static inline bool reason_IsValid(int value) {
    return Message_AuthenticateWebFailure_reason_IsValid(value);
  }
  static constexpr reason reason_MIN =
    Message_AuthenticateWebFailure_reason_reason_MIN;
  static constexpr reason reason_MAX =
    Message_AuthenticateWebFailure_reason_reason_MAX;
  static constexpr int reason_ARRAYSIZE =
    Message_AuthenticateWebFailure_reason_reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reason_descriptor() {
    return Message_AuthenticateWebFailure_reason_descriptor();
  }
  template<typename T>
  static inline const std::string& reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reason_Name.");
    return Message_AuthenticateWebFailure_reason_Name(enum_t_value);
  }
  static inline bool reason_Parse(const std::string& name,
      reason* value) {
    return Message_AuthenticateWebFailure_reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // required int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:gProtocol.Message.AuthenticateWebFailure)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// -------------------------------------------------------------------

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gProtocol.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gProtocol.Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protobuf_2eproto);
    return ::descriptor_table_protobuf_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_CreateAccountWeb CreateAccountWeb;
  typedef Message_CreateAccountWebSuccess CreateAccountWebSuccess;
  typedef Message_CreateAccountWebFailure CreateAccountWebFailure;
  typedef Message_AuthenticateWeb AuthenticateWeb;
  typedef Message_AuthenticateWebSuccess AuthenticateWebSuccess;
  typedef Message_AuthenticateWebFailure AuthenticateWebFailure;

  typedef Message_MessageType MessageType;
  static constexpr MessageType Create =
    Message_MessageType_Create;
  static constexpr MessageType Authenticate =
    Message_MessageType_Authenticate;
  static inline bool MessageType_IsValid(int value) {
    return Message_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN =
    Message_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX =
    Message_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE =
    Message_MessageType_MessageType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  MessageType_descriptor() {
    return Message_MessageType_descriptor();
  }
  template<typename T>
  static inline const std::string& MessageType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, MessageType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function MessageType_Name.");
    return Message_MessageType_Name(enum_t_value);
  }
  static inline bool MessageType_Parse(const std::string& name,
      MessageType* value) {
    return Message_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:gProtocol.Message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protobuf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message_CreateAccountWeb

// required int32 requestId = 1;
inline bool Message_CreateAccountWeb::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message_CreateAccountWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void Message_CreateAccountWeb::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_CreateAccountWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_CreateAccountWeb::requestid() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.CreateAccountWeb.requestId)
  return _internal_requestid();
}
inline void Message_CreateAccountWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void Message_CreateAccountWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.CreateAccountWeb.requestId)
}

// required string email = 2;
inline bool Message_CreateAccountWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message_CreateAccountWeb::has_email() const {
  return _internal_has_email();
}
inline void Message_CreateAccountWeb::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message_CreateAccountWeb::email() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.CreateAccountWeb.email)
  return _internal_email();
}
inline void Message_CreateAccountWeb::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.CreateAccountWeb.email)
}
inline std::string* Message_CreateAccountWeb::mutable_email() {
  // @@protoc_insertion_point(field_mutable:gProtocol.Message.CreateAccountWeb.email)
  return _internal_mutable_email();
}
inline const std::string& Message_CreateAccountWeb::_internal_email() const {
  return email_.GetNoArena();
}
inline void Message_CreateAccountWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message_CreateAccountWeb::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gProtocol.Message.CreateAccountWeb.email)
}
inline void Message_CreateAccountWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gProtocol.Message.CreateAccountWeb.email)
}
inline void Message_CreateAccountWeb::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gProtocol.Message.CreateAccountWeb.email)
}
inline std::string* Message_CreateAccountWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message_CreateAccountWeb::release_email() {
  // @@protoc_insertion_point(field_release:gProtocol.Message.CreateAccountWeb.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message_CreateAccountWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:gProtocol.Message.CreateAccountWeb.email)
}

// required string plaintextPassword = 3;
inline bool Message_CreateAccountWeb::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message_CreateAccountWeb::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void Message_CreateAccountWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message_CreateAccountWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.CreateAccountWeb.plaintextPassword)
  return _internal_plaintextpassword();
}
inline void Message_CreateAccountWeb::set_plaintextpassword(const std::string& value) {
  _internal_set_plaintextpassword(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.CreateAccountWeb.plaintextPassword)
}
inline std::string* Message_CreateAccountWeb::mutable_plaintextpassword() {
  // @@protoc_insertion_point(field_mutable:gProtocol.Message.CreateAccountWeb.plaintextPassword)
  return _internal_mutable_plaintextpassword();
}
inline const std::string& Message_CreateAccountWeb::_internal_plaintextpassword() const {
  return plaintextpassword_.GetNoArena();
}
inline void Message_CreateAccountWeb::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message_CreateAccountWeb::set_plaintextpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gProtocol.Message.CreateAccountWeb.plaintextPassword)
}
inline void Message_CreateAccountWeb::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gProtocol.Message.CreateAccountWeb.plaintextPassword)
}
inline void Message_CreateAccountWeb::set_plaintextpassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gProtocol.Message.CreateAccountWeb.plaintextPassword)
}
inline std::string* Message_CreateAccountWeb::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message_CreateAccountWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:gProtocol.Message.CreateAccountWeb.plaintextPassword)
  if (!has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message_CreateAccountWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword);
  // @@protoc_insertion_point(field_set_allocated:gProtocol.Message.CreateAccountWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// Message_CreateAccountWebSuccess

// required int32 requestId = 1;
inline bool Message_CreateAccountWebSuccess::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message_CreateAccountWebSuccess::has_requestid() const {
  return _internal_has_requestid();
}
inline void Message_CreateAccountWebSuccess::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_CreateAccountWebSuccess::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_CreateAccountWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.CreateAccountWebSuccess.requestId)
  return _internal_requestid();
}
inline void Message_CreateAccountWebSuccess::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void Message_CreateAccountWebSuccess::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.CreateAccountWebSuccess.requestId)
}

// required int32 userId = 2;
inline bool Message_CreateAccountWebSuccess::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message_CreateAccountWebSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void Message_CreateAccountWebSuccess::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_CreateAccountWebSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_CreateAccountWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.CreateAccountWebSuccess.userId)
  return _internal_userid();
}
inline void Message_CreateAccountWebSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void Message_CreateAccountWebSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.CreateAccountWebSuccess.userId)
}

// -------------------------------------------------------------------

// Message_CreateAccountWebFailure

// required int32 requestId = 1;
inline bool Message_CreateAccountWebFailure::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message_CreateAccountWebFailure::has_requestid() const {
  return _internal_has_requestid();
}
inline void Message_CreateAccountWebFailure::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_CreateAccountWebFailure::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_CreateAccountWebFailure::requestid() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.CreateAccountWebFailure.requestId)
  return _internal_requestid();
}
inline void Message_CreateAccountWebFailure::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void Message_CreateAccountWebFailure::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.CreateAccountWebFailure.requestId)
}

// -------------------------------------------------------------------

// Message_AuthenticateWeb

// required int32 requestId = 1;
inline bool Message_AuthenticateWeb::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message_AuthenticateWeb::has_requestid() const {
  return _internal_has_requestid();
}
inline void Message_AuthenticateWeb::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_AuthenticateWeb::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_AuthenticateWeb::requestid() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.AuthenticateWeb.requestId)
  return _internal_requestid();
}
inline void Message_AuthenticateWeb::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  requestid_ = value;
}
inline void Message_AuthenticateWeb::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.AuthenticateWeb.requestId)
}

// required string email = 2;
inline bool Message_AuthenticateWeb::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message_AuthenticateWeb::has_email() const {
  return _internal_has_email();
}
inline void Message_AuthenticateWeb::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message_AuthenticateWeb::email() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.AuthenticateWeb.email)
  return _internal_email();
}
inline void Message_AuthenticateWeb::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.AuthenticateWeb.email)
}
inline std::string* Message_AuthenticateWeb::mutable_email() {
  // @@protoc_insertion_point(field_mutable:gProtocol.Message.AuthenticateWeb.email)
  return _internal_mutable_email();
}
inline const std::string& Message_AuthenticateWeb::_internal_email() const {
  return email_.GetNoArena();
}
inline void Message_AuthenticateWeb::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message_AuthenticateWeb::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gProtocol.Message.AuthenticateWeb.email)
}
inline void Message_AuthenticateWeb::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gProtocol.Message.AuthenticateWeb.email)
}
inline void Message_AuthenticateWeb::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gProtocol.Message.AuthenticateWeb.email)
}
inline std::string* Message_AuthenticateWeb::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message_AuthenticateWeb::release_email() {
  // @@protoc_insertion_point(field_release:gProtocol.Message.AuthenticateWeb.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message_AuthenticateWeb::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:gProtocol.Message.AuthenticateWeb.email)
}

// required string plaintextPassword = 3;
inline bool Message_AuthenticateWeb::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message_AuthenticateWeb::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void Message_AuthenticateWeb::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Message_AuthenticateWeb::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.AuthenticateWeb.plaintextPassword)
  return _internal_plaintextpassword();
}
inline void Message_AuthenticateWeb::set_plaintextpassword(const std::string& value) {
  _internal_set_plaintextpassword(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.AuthenticateWeb.plaintextPassword)
}
inline std::string* Message_AuthenticateWeb::mutable_plaintextpassword() {
  // @@protoc_insertion_point(field_mutable:gProtocol.Message.AuthenticateWeb.plaintextPassword)
  return _internal_mutable_plaintextpassword();
}
inline const std::string& Message_AuthenticateWeb::_internal_plaintextpassword() const {
  return plaintextpassword_.GetNoArena();
}
inline void Message_AuthenticateWeb::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message_AuthenticateWeb::set_plaintextpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gProtocol.Message.AuthenticateWeb.plaintextPassword)
}
inline void Message_AuthenticateWeb::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gProtocol.Message.AuthenticateWeb.plaintextPassword)
}
inline void Message_AuthenticateWeb::set_plaintextpassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gProtocol.Message.AuthenticateWeb.plaintextPassword)
}
inline std::string* Message_AuthenticateWeb::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message_AuthenticateWeb::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:gProtocol.Message.AuthenticateWeb.plaintextPassword)
  if (!has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message_AuthenticateWeb::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword);
  // @@protoc_insertion_point(field_set_allocated:gProtocol.Message.AuthenticateWeb.plaintextPassword)
}

// -------------------------------------------------------------------

// Message_AuthenticateWebSuccess

// required int32 requestId = 1;
inline bool Message_AuthenticateWebSuccess::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Message_AuthenticateWebSuccess::has_requestid() const {
  return _internal_has_requestid();
}
inline void Message_AuthenticateWebSuccess::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_AuthenticateWebSuccess::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_AuthenticateWebSuccess::requestid() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.AuthenticateWebSuccess.requestId)
  return _internal_requestid();
}
inline void Message_AuthenticateWebSuccess::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  requestid_ = value;
}
inline void Message_AuthenticateWebSuccess::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.AuthenticateWebSuccess.requestId)
}

// required int32 userId = 2;
inline bool Message_AuthenticateWebSuccess::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Message_AuthenticateWebSuccess::has_userid() const {
  return _internal_has_userid();
}
inline void Message_AuthenticateWebSuccess::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_AuthenticateWebSuccess::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_AuthenticateWebSuccess::userid() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.AuthenticateWebSuccess.userId)
  return _internal_userid();
}
inline void Message_AuthenticateWebSuccess::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  userid_ = value;
}
inline void Message_AuthenticateWebSuccess::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.AuthenticateWebSuccess.userId)
}

// required string creationDate = 3;
inline bool Message_AuthenticateWebSuccess::_internal_has_creationdate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message_AuthenticateWebSuccess::has_creationdate() const {
  return _internal_has_creationdate();
}
inline void Message_AuthenticateWebSuccess::clear_creationdate() {
  creationdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Message_AuthenticateWebSuccess::creationdate() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.AuthenticateWebSuccess.creationDate)
  return _internal_creationdate();
}
inline void Message_AuthenticateWebSuccess::set_creationdate(const std::string& value) {
  _internal_set_creationdate(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.AuthenticateWebSuccess.creationDate)
}
inline std::string* Message_AuthenticateWebSuccess::mutable_creationdate() {
  // @@protoc_insertion_point(field_mutable:gProtocol.Message.AuthenticateWebSuccess.creationDate)
  return _internal_mutable_creationdate();
}
inline const std::string& Message_AuthenticateWebSuccess::_internal_creationdate() const {
  return creationdate_.GetNoArena();
}
inline void Message_AuthenticateWebSuccess::_internal_set_creationdate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Message_AuthenticateWebSuccess::set_creationdate(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gProtocol.Message.AuthenticateWebSuccess.creationDate)
}
inline void Message_AuthenticateWebSuccess::set_creationdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gProtocol.Message.AuthenticateWebSuccess.creationDate)
}
inline void Message_AuthenticateWebSuccess::set_creationdate(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gProtocol.Message.AuthenticateWebSuccess.creationDate)
}
inline std::string* Message_AuthenticateWebSuccess::_internal_mutable_creationdate() {
  _has_bits_[0] |= 0x00000001u;
  return creationdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Message_AuthenticateWebSuccess::release_creationdate() {
  // @@protoc_insertion_point(field_release:gProtocol.Message.AuthenticateWebSuccess.creationDate)
  if (!has_creationdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return creationdate_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Message_AuthenticateWebSuccess::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  creationdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creationdate);
  // @@protoc_insertion_point(field_set_allocated:gProtocol.Message.AuthenticateWebSuccess.creationDate)
}

// -------------------------------------------------------------------

// Message_AuthenticateWebFailure

// required int32 requestId = 1;
inline bool Message_AuthenticateWebFailure::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Message_AuthenticateWebFailure::has_requestid() const {
  return _internal_has_requestid();
}
inline void Message_AuthenticateWebFailure::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_AuthenticateWebFailure::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message_AuthenticateWebFailure::requestid() const {
  // @@protoc_insertion_point(field_get:gProtocol.Message.AuthenticateWebFailure.requestId)
  return _internal_requestid();
}
inline void Message_AuthenticateWebFailure::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  requestid_ = value;
}
inline void Message_AuthenticateWebFailure::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:gProtocol.Message.AuthenticateWebFailure.requestId)
}

// -------------------------------------------------------------------

// Message

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace gProtocol

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gProtocol::Message_CreateAccountWebFailure_reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gProtocol::Message_CreateAccountWebFailure_reason>() {
  return ::gProtocol::Message_CreateAccountWebFailure_reason_descriptor();
}
template <> struct is_proto_enum< ::gProtocol::Message_AuthenticateWebFailure_reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gProtocol::Message_AuthenticateWebFailure_reason>() {
  return ::gProtocol::Message_AuthenticateWebFailure_reason_descriptor();
}
template <> struct is_proto_enum< ::gProtocol::Message_MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gProtocol::Message_MessageType>() {
  return ::gProtocol::Message_MessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protobuf_2eproto
