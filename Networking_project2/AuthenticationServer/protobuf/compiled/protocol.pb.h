// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protocol_2eproto;
namespace gProtocol2 {
class GoogleBuffer;
class GoogleBufferDefaultTypeInternal;
extern GoogleBufferDefaultTypeInternal _GoogleBuffer_default_instance_;
}  // namespace gProtocol2
PROTOBUF_NAMESPACE_OPEN
template<> ::gProtocol2::GoogleBuffer* Arena::CreateMaybeMessage<::gProtocol2::GoogleBuffer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace gProtocol2 {

enum GoogleBuffer_msgType : int {
  GoogleBuffer_msgType_CREATE = 0,
  GoogleBuffer_msgType_AUTHENTICATE = 1
};
bool GoogleBuffer_msgType_IsValid(int value);
constexpr GoogleBuffer_msgType GoogleBuffer_msgType_msgType_MIN = GoogleBuffer_msgType_CREATE;
constexpr GoogleBuffer_msgType GoogleBuffer_msgType_msgType_MAX = GoogleBuffer_msgType_AUTHENTICATE;
constexpr int GoogleBuffer_msgType_msgType_ARRAYSIZE = GoogleBuffer_msgType_msgType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GoogleBuffer_msgType_descriptor();
template<typename T>
inline const std::string& GoogleBuffer_msgType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GoogleBuffer_msgType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GoogleBuffer_msgType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GoogleBuffer_msgType_descriptor(), enum_t_value);
}
inline bool GoogleBuffer_msgType_Parse(
    const std::string& name, GoogleBuffer_msgType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GoogleBuffer_msgType>(
    GoogleBuffer_msgType_descriptor(), name, value);
}
enum GoogleBuffer_reason : int {
  GoogleBuffer_reason_ACCOUNT_ALREADY_EXISTS = 0,
  GoogleBuffer_reason_INVALID_PASSWORD = 1,
  GoogleBuffer_reason_INTERNAL_SERVER_ERROR = 2,
  GoogleBuffer_reason_INVALID_CREDENTIALS = 3
};
bool GoogleBuffer_reason_IsValid(int value);
constexpr GoogleBuffer_reason GoogleBuffer_reason_reason_MIN = GoogleBuffer_reason_ACCOUNT_ALREADY_EXISTS;
constexpr GoogleBuffer_reason GoogleBuffer_reason_reason_MAX = GoogleBuffer_reason_INVALID_CREDENTIALS;
constexpr int GoogleBuffer_reason_reason_ARRAYSIZE = GoogleBuffer_reason_reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GoogleBuffer_reason_descriptor();
template<typename T>
inline const std::string& GoogleBuffer_reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GoogleBuffer_reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GoogleBuffer_reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GoogleBuffer_reason_descriptor(), enum_t_value);
}
inline bool GoogleBuffer_reason_Parse(
    const std::string& name, GoogleBuffer_reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GoogleBuffer_reason>(
    GoogleBuffer_reason_descriptor(), name, value);
}
// ===================================================================

class GoogleBuffer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:gProtocol2.GoogleBuffer) */ {
 public:
  GoogleBuffer();
  virtual ~GoogleBuffer();

  GoogleBuffer(const GoogleBuffer& from);
  GoogleBuffer(GoogleBuffer&& from) noexcept
    : GoogleBuffer() {
    *this = ::std::move(from);
  }

  inline GoogleBuffer& operator=(const GoogleBuffer& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoogleBuffer& operator=(GoogleBuffer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GoogleBuffer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoogleBuffer* internal_default_instance() {
    return reinterpret_cast<const GoogleBuffer*>(
               &_GoogleBuffer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GoogleBuffer& a, GoogleBuffer& b) {
    a.Swap(&b);
  }
  inline void Swap(GoogleBuffer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoogleBuffer* New() const final {
    return CreateMaybeMessage<GoogleBuffer>(nullptr);
  }

  GoogleBuffer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoogleBuffer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoogleBuffer& from);
  void MergeFrom(const GoogleBuffer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoogleBuffer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "gProtocol2.GoogleBuffer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_protocol_2eproto);
    return ::descriptor_table_protocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef GoogleBuffer_msgType msgType;
  static constexpr msgType CREATE =
    GoogleBuffer_msgType_CREATE;
  static constexpr msgType AUTHENTICATE =
    GoogleBuffer_msgType_AUTHENTICATE;
  static inline bool msgType_IsValid(int value) {
    return GoogleBuffer_msgType_IsValid(value);
  }
  static constexpr msgType msgType_MIN =
    GoogleBuffer_msgType_msgType_MIN;
  static constexpr msgType msgType_MAX =
    GoogleBuffer_msgType_msgType_MAX;
  static constexpr int msgType_ARRAYSIZE =
    GoogleBuffer_msgType_msgType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  msgType_descriptor() {
    return GoogleBuffer_msgType_descriptor();
  }
  template<typename T>
  static inline const std::string& msgType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, msgType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function msgType_Name.");
    return GoogleBuffer_msgType_Name(enum_t_value);
  }
  static inline bool msgType_Parse(const std::string& name,
      msgType* value) {
    return GoogleBuffer_msgType_Parse(name, value);
  }

  typedef GoogleBuffer_reason reason;
  static constexpr reason ACCOUNT_ALREADY_EXISTS =
    GoogleBuffer_reason_ACCOUNT_ALREADY_EXISTS;
  static constexpr reason INVALID_PASSWORD =
    GoogleBuffer_reason_INVALID_PASSWORD;
  static constexpr reason INTERNAL_SERVER_ERROR =
    GoogleBuffer_reason_INTERNAL_SERVER_ERROR;
  static constexpr reason INVALID_CREDENTIALS =
    GoogleBuffer_reason_INVALID_CREDENTIALS;
  static inline bool reason_IsValid(int value) {
    return GoogleBuffer_reason_IsValid(value);
  }
  static constexpr reason reason_MIN =
    GoogleBuffer_reason_reason_MIN;
  static constexpr reason reason_MAX =
    GoogleBuffer_reason_reason_MAX;
  static constexpr int reason_ARRAYSIZE =
    GoogleBuffer_reason_reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  reason_descriptor() {
    return GoogleBuffer_reason_descriptor();
  }
  template<typename T>
  static inline const std::string& reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function reason_Name.");
    return GoogleBuffer_reason_Name(enum_t_value);
  }
  static inline bool reason_Parse(const std::string& name,
      reason* value) {
    return GoogleBuffer_reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 2,
    kPlaintextPasswordFieldNumber = 3,
    kCreationDateFieldNumber = 5,
    kRequestIdFieldNumber = 1,
    kUserIdFieldNumber = 4,
    kTypeFieldNumber = 6,
    kRFieldNumber = 7,
  };
  // optional string email = 2;
  bool has_email() const;
  private:
  bool _internal_has_email() const;
  public:
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // optional string plaintextPassword = 3;
  bool has_plaintextpassword() const;
  private:
  bool _internal_has_plaintextpassword() const;
  public:
  void clear_plaintextpassword();
  const std::string& plaintextpassword() const;
  void set_plaintextpassword(const std::string& value);
  void set_plaintextpassword(std::string&& value);
  void set_plaintextpassword(const char* value);
  void set_plaintextpassword(const char* value, size_t size);
  std::string* mutable_plaintextpassword();
  std::string* release_plaintextpassword();
  void set_allocated_plaintextpassword(std::string* plaintextpassword);
  private:
  const std::string& _internal_plaintextpassword() const;
  void _internal_set_plaintextpassword(const std::string& value);
  std::string* _internal_mutable_plaintextpassword();
  public:

  // optional string creationDate = 5;
  bool has_creationdate() const;
  private:
  bool _internal_has_creationdate() const;
  public:
  void clear_creationdate();
  const std::string& creationdate() const;
  void set_creationdate(const std::string& value);
  void set_creationdate(std::string&& value);
  void set_creationdate(const char* value);
  void set_creationdate(const char* value, size_t size);
  std::string* mutable_creationdate();
  std::string* release_creationdate();
  void set_allocated_creationdate(std::string* creationdate);
  private:
  const std::string& _internal_creationdate() const;
  void _internal_set_creationdate(const std::string& value);
  std::string* _internal_mutable_creationdate();
  public:

  // optional int32 requestId = 1;
  bool has_requestid() const;
  private:
  bool _internal_has_requestid() const;
  public:
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 userId = 4;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .gProtocol2.GoogleBuffer.msgType type = 6;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::gProtocol2::GoogleBuffer_msgType type() const;
  void set_type(::gProtocol2::GoogleBuffer_msgType value);
  private:
  ::gProtocol2::GoogleBuffer_msgType _internal_type() const;
  void _internal_set_type(::gProtocol2::GoogleBuffer_msgType value);
  public:

  // optional .gProtocol2.GoogleBuffer.reason r = 7;
  bool has_r() const;
  private:
  bool _internal_has_r() const;
  public:
  void clear_r();
  ::gProtocol2::GoogleBuffer_reason r() const;
  void set_r(::gProtocol2::GoogleBuffer_reason value);
  private:
  ::gProtocol2::GoogleBuffer_reason _internal_r() const;
  void _internal_set_r(::gProtocol2::GoogleBuffer_reason value);
  public:

  // @@protoc_insertion_point(class_scope:gProtocol2.GoogleBuffer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plaintextpassword_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creationdate_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  int type_;
  int r_;
  friend struct ::TableStruct_protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GoogleBuffer

// optional int32 requestId = 1;
inline bool GoogleBuffer::_internal_has_requestid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GoogleBuffer::has_requestid() const {
  return _internal_has_requestid();
}
inline void GoogleBuffer::clear_requestid() {
  requestid_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoogleBuffer::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoogleBuffer::requestid() const {
  // @@protoc_insertion_point(field_get:gProtocol2.GoogleBuffer.requestId)
  return _internal_requestid();
}
inline void GoogleBuffer::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  requestid_ = value;
}
inline void GoogleBuffer::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:gProtocol2.GoogleBuffer.requestId)
}

// optional string email = 2;
inline bool GoogleBuffer::_internal_has_email() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GoogleBuffer::has_email() const {
  return _internal_has_email();
}
inline void GoogleBuffer::clear_email() {
  email_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GoogleBuffer::email() const {
  // @@protoc_insertion_point(field_get:gProtocol2.GoogleBuffer.email)
  return _internal_email();
}
inline void GoogleBuffer::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:gProtocol2.GoogleBuffer.email)
}
inline std::string* GoogleBuffer::mutable_email() {
  // @@protoc_insertion_point(field_mutable:gProtocol2.GoogleBuffer.email)
  return _internal_mutable_email();
}
inline const std::string& GoogleBuffer::_internal_email() const {
  return email_.GetNoArena();
}
inline void GoogleBuffer::_internal_set_email(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GoogleBuffer::set_email(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gProtocol2.GoogleBuffer.email)
}
inline void GoogleBuffer::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gProtocol2.GoogleBuffer.email)
}
inline void GoogleBuffer::set_email(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  email_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gProtocol2.GoogleBuffer.email)
}
inline std::string* GoogleBuffer::_internal_mutable_email() {
  _has_bits_[0] |= 0x00000001u;
  return email_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GoogleBuffer::release_email() {
  // @@protoc_insertion_point(field_release:gProtocol2.GoogleBuffer.email)
  if (!has_email()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return email_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleBuffer::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  email_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:gProtocol2.GoogleBuffer.email)
}

// optional string plaintextPassword = 3;
inline bool GoogleBuffer::_internal_has_plaintextpassword() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GoogleBuffer::has_plaintextpassword() const {
  return _internal_has_plaintextpassword();
}
inline void GoogleBuffer::clear_plaintextpassword() {
  plaintextpassword_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GoogleBuffer::plaintextpassword() const {
  // @@protoc_insertion_point(field_get:gProtocol2.GoogleBuffer.plaintextPassword)
  return _internal_plaintextpassword();
}
inline void GoogleBuffer::set_plaintextpassword(const std::string& value) {
  _internal_set_plaintextpassword(value);
  // @@protoc_insertion_point(field_set:gProtocol2.GoogleBuffer.plaintextPassword)
}
inline std::string* GoogleBuffer::mutable_plaintextpassword() {
  // @@protoc_insertion_point(field_mutable:gProtocol2.GoogleBuffer.plaintextPassword)
  return _internal_mutable_plaintextpassword();
}
inline const std::string& GoogleBuffer::_internal_plaintextpassword() const {
  return plaintextpassword_.GetNoArena();
}
inline void GoogleBuffer::_internal_set_plaintextpassword(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GoogleBuffer::set_plaintextpassword(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gProtocol2.GoogleBuffer.plaintextPassword)
}
inline void GoogleBuffer::set_plaintextpassword(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gProtocol2.GoogleBuffer.plaintextPassword)
}
inline void GoogleBuffer::set_plaintextpassword(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  plaintextpassword_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gProtocol2.GoogleBuffer.plaintextPassword)
}
inline std::string* GoogleBuffer::_internal_mutable_plaintextpassword() {
  _has_bits_[0] |= 0x00000002u;
  return plaintextpassword_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GoogleBuffer::release_plaintextpassword() {
  // @@protoc_insertion_point(field_release:gProtocol2.GoogleBuffer.plaintextPassword)
  if (!has_plaintextpassword()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return plaintextpassword_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleBuffer::set_allocated_plaintextpassword(std::string* plaintextpassword) {
  if (plaintextpassword != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  plaintextpassword_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plaintextpassword);
  // @@protoc_insertion_point(field_set_allocated:gProtocol2.GoogleBuffer.plaintextPassword)
}

// optional int32 userId = 4;
inline bool GoogleBuffer::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GoogleBuffer::has_userid() const {
  return _internal_has_userid();
}
inline void GoogleBuffer::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoogleBuffer::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoogleBuffer::userid() const {
  // @@protoc_insertion_point(field_get:gProtocol2.GoogleBuffer.userId)
  return _internal_userid();
}
inline void GoogleBuffer::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  userid_ = value;
}
inline void GoogleBuffer::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:gProtocol2.GoogleBuffer.userId)
}

// optional string creationDate = 5;
inline bool GoogleBuffer::_internal_has_creationdate() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GoogleBuffer::has_creationdate() const {
  return _internal_has_creationdate();
}
inline void GoogleBuffer::clear_creationdate() {
  creationdate_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GoogleBuffer::creationdate() const {
  // @@protoc_insertion_point(field_get:gProtocol2.GoogleBuffer.creationDate)
  return _internal_creationdate();
}
inline void GoogleBuffer::set_creationdate(const std::string& value) {
  _internal_set_creationdate(value);
  // @@protoc_insertion_point(field_set:gProtocol2.GoogleBuffer.creationDate)
}
inline std::string* GoogleBuffer::mutable_creationdate() {
  // @@protoc_insertion_point(field_mutable:gProtocol2.GoogleBuffer.creationDate)
  return _internal_mutable_creationdate();
}
inline const std::string& GoogleBuffer::_internal_creationdate() const {
  return creationdate_.GetNoArena();
}
inline void GoogleBuffer::_internal_set_creationdate(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GoogleBuffer::set_creationdate(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  creationdate_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gProtocol2.GoogleBuffer.creationDate)
}
inline void GoogleBuffer::set_creationdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gProtocol2.GoogleBuffer.creationDate)
}
inline void GoogleBuffer::set_creationdate(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000004u;
  creationdate_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gProtocol2.GoogleBuffer.creationDate)
}
inline std::string* GoogleBuffer::_internal_mutable_creationdate() {
  _has_bits_[0] |= 0x00000004u;
  return creationdate_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GoogleBuffer::release_creationdate() {
  // @@protoc_insertion_point(field_release:gProtocol2.GoogleBuffer.creationDate)
  if (!has_creationdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return creationdate_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GoogleBuffer::set_allocated_creationdate(std::string* creationdate) {
  if (creationdate != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  creationdate_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), creationdate);
  // @@protoc_insertion_point(field_set_allocated:gProtocol2.GoogleBuffer.creationDate)
}

// optional .gProtocol2.GoogleBuffer.msgType type = 6;
inline bool GoogleBuffer::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GoogleBuffer::has_type() const {
  return _internal_has_type();
}
inline void GoogleBuffer::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::gProtocol2::GoogleBuffer_msgType GoogleBuffer::_internal_type() const {
  return static_cast< ::gProtocol2::GoogleBuffer_msgType >(type_);
}
inline ::gProtocol2::GoogleBuffer_msgType GoogleBuffer::type() const {
  // @@protoc_insertion_point(field_get:gProtocol2.GoogleBuffer.type)
  return _internal_type();
}
inline void GoogleBuffer::_internal_set_type(::gProtocol2::GoogleBuffer_msgType value) {
  assert(::gProtocol2::GoogleBuffer_msgType_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  type_ = value;
}
inline void GoogleBuffer::set_type(::gProtocol2::GoogleBuffer_msgType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:gProtocol2.GoogleBuffer.type)
}

// optional .gProtocol2.GoogleBuffer.reason r = 7;
inline bool GoogleBuffer::_internal_has_r() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GoogleBuffer::has_r() const {
  return _internal_has_r();
}
inline void GoogleBuffer::clear_r() {
  r_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::gProtocol2::GoogleBuffer_reason GoogleBuffer::_internal_r() const {
  return static_cast< ::gProtocol2::GoogleBuffer_reason >(r_);
}
inline ::gProtocol2::GoogleBuffer_reason GoogleBuffer::r() const {
  // @@protoc_insertion_point(field_get:gProtocol2.GoogleBuffer.r)
  return _internal_r();
}
inline void GoogleBuffer::_internal_set_r(::gProtocol2::GoogleBuffer_reason value) {
  assert(::gProtocol2::GoogleBuffer_reason_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  r_ = value;
}
inline void GoogleBuffer::set_r(::gProtocol2::GoogleBuffer_reason value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:gProtocol2.GoogleBuffer.r)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gProtocol2

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::gProtocol2::GoogleBuffer_msgType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gProtocol2::GoogleBuffer_msgType>() {
  return ::gProtocol2::GoogleBuffer_msgType_descriptor();
}
template <> struct is_proto_enum< ::gProtocol2::GoogleBuffer_reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gProtocol2::GoogleBuffer_reason>() {
  return ::gProtocol2::GoogleBuffer_reason_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protocol_2eproto
